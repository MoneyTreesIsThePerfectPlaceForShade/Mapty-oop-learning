"use strict";

// prettier-ignore

const form = document.querySelector(".form");
const containerWorkouts = document.querySelector(".workouts");
const inputType = document.querySelector(".form__input--type");
const inputDistance = document.querySelector(".form__input--distance");
const inputDuration = document.querySelector(".form__input--duration");
const inputCadence = document.querySelector(".form__input--cadence");
const inputElevation = document.querySelector(".form__input--elevation");

// —Å—Ç—Ä–æ–∏–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –≤ –û–û–ü —Å—Ç–∏–ª–µ

/////////////////////////////////////////////////////////////////////////////
// –∫–ª–∞—Å—Å –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, —É –Ω–∞—Å –±—É–¥—É—Ç –¥–≤–∞ child –∫–ª–∞—Å—Å–∞: –¥–ª—è –±–µ–≥–∞ –∏ –¥–ª—è –≤–µ–ª–∏–∫–∞
/////////////////////////////////////////////////////////////////////////////
class Workout {
  date = new Date();
  // –≤ —Ä–µ–∞–ª—å–Ω–æ–º –º–∏—Ä–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è ID, –Ω–æ –≤ —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–∏–º—Å—è
  // —Ç–∞–∫–∏–º –º–µ—Ç–æ–¥–æ–º
  id = (Date.now() + "").slice(-10);
  clicks = 0;

  constructor(coords, distance, duration) {
    this.coords = coords; // [lat, lng]
    this.distance = distance; // in km
    this.duration = duration; // in min
  }

  _setDescription() {
    // prettier-ignore
    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July',
    'August', 'September', 'October', 'November', 'December'];

    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${
      months[this.date.getMonth()]
    } ${this.date.getDate()}`;
  }

  click() {
    this.clicks++;
  }
}

/////////////
// –∫–ª–∞—Å—Å –±–µ–≥–∞
/////////////
class Running extends Workout {
  type = "running";
  constructor(coords, distance, duration, cadence) {
    super(coords, distance, duration);
    this.cadence = cadence;
    this.calcPace();

    this._setDescription();
  }

  calcPace() {
    // min/km
    this.pace = this.duration / this.distance;
    return this.pace;
  }
}

////////////////
// –∫–ª–∞—Å—Å –≤–µ–ª–∏–∫–∞
////////////////
class Cycling extends Workout {
  type = "cycling";
  constructor(coords, distance, duration, elevationGain) {
    super(coords, distance, duration);
    this.elevationGain = elevationGain;
    this.calcSpeed();

    this._setDescription();
  }

  calcSpeed() {
    // km/h                  // –¥–µ–ª–∏–º –Ω–∞ 60, —Ç.–∫. –¥–∞–Ω–Ω—ã–µ –∑–∞–≤–æ–¥–∏–º –≤ –º–∏–Ω—É—Ç–∞—Ö
    this.speed = this.distance / (this.duration / 60);
    return this.speed;
  }
}

// const run1 = new Running([39, -12], 5.2, 24, 178);
// const cycle1 = new Cycling([39, -12], 27, 95, 523);

//////////////////////////////////////////////////////
// –∫–ª–∞—Å—Å —Å–∞–º–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è // –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
//////////////////////////////////////////////////////
class App {
  // –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø–æ–ª—è
  #map;
  #mapZoom = 13;
  #mapEvent;
  #workouts = [];

  constructor() {
    // –ø—Ä–æ–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—É
    this._getPosition();

    // get data from local storage
    this._getLocalStorage();

    // –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞
    // —Å–Ω–æ–≤–∞ –±–∏–Ω–¥–∏–º, –ø–æ—Ç–æ–º—É —á—Ç–æ this –≤ eventHandler –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ HTML —ç–ª–µ–º–µ–Ω—Ç,
    // —Ç–æ –µ—Å—Ç—å –Ω–∞ —Ñ–æ—Ä–º—É –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, —á—Ç–æ–±—ã —É–∫–∞–∑—ã–≤–∞–ª –Ω–∞ –æ–±—ä–µ–∫—Ç, –Ω—É–∂–Ω–æ –±–∏–Ω–¥–∏—Ç—å
    form.addEventListener("submit", this._newWorkout.bind(this));

    inputType.addEventListener("change", this._toggleElevationField);

    containerWorkouts.addEventListener("click", this._moveToPopup.bind(this));
  }

  // –º–µ—Ç–æ–¥, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –∫–∞—Ä—Ç—É
  _getPosition() {
    // –∏—Å–ø–æ–ª—å–∑—É—é geolocation api
    if (navigator.geolocation) {
      // –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –∫–æ–ª–±—ç–∫–∞ - –Ω–∞ success –∏ –Ω–∞ error
      navigator.geolocation.getCurrentPosition(
        // –∫–æ–≥–¥–∞ –º—ã –ø–æ–¥–∞–µ–º —Ñ-–∏—é –±–µ–∑ –≤—ã–∑–æ–≤–∞, –Ω–æ –Ω–∞–º –Ω—É–∂–µ–Ω this, —Ç–æ –±–∏–Ω–¥–∏–º –µ–≥–æ —Å–∞–º–∏
        this._loadMap.bind(this),
        function () {
          alert("Could not get your position");
        }
      );
    }
  }

  // —Ä–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç—ã
  _loadMap(position) {
    // –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    const { latitude } = position.coords;
    const { longitude } = position.coords;
    // console.log(`https://www.google.com/maps/@${latitude},${longitude}`);
    // —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è leaflet lib
    const coords = [latitude, longitude];
    // —Ä–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç—ã
    this.#map = L.map("map").setView(coords, this.#mapZoom);

    L.tileLayer("https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png", {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(this.#map);

    // event listener –≤ leaflet lib
    this.#map.on("click", this._showForm.bind(this));

    this.#workouts.forEach((work) => this._renderWorkoutMarker(work));
  }

  _showForm(mapE) {
    this.#mapEvent = mapE;
    form.classList.remove("hidden");
    inputDistance.focus();
  }

  _hideForm() {
    // —á–∏—Å—Ç–∏–º –∏–Ω–ø—É—Ç—ã
    inputDistance.value =
      inputDuration.value =
      inputCadence.value =
      inputElevation.value =
        "";

    form.style.display = "none";
    // —Å–∫—Ä—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É
    form.classList.add("hidden");

    setTimeout(() => (form.style.display = "grid"), 1000);
  }

  _toggleElevationField() {
    inputElevation.closest(".form__row").classList.toggle("form__row--hidden");
    inputCadence.closest(".form__row").classList.toggle("form__row--hidden");
  }

  _newWorkout(e) {
    // –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö '...inputs', —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–Ω–ø—É—Ç–æ–≤, –ª—é–±–æ–π –¥–ª–∏–Ω—ã
    // .every - –µ—Å–ª–∏ –∫–æ–¥ true –¥–ª—è –≤—Å–µ—Ö, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true
    const validInputs = (...inputs) =>
      inputs.every((inp) => Number.isFinite(inp));

    const allPositive = (...inputs) => inputs.every((inp) => inp > 0);

    e.preventDefault();

    // Get data from form
    const type = inputType.value;
    const distance = +inputDistance.value;
    const duration = +inputDuration.value;
    const { lat, lng } = this.#mapEvent.latlng;
    let workout;
    // If workout running, create running object
    if (type === "running") {
      // Check if data is valid
      const cadence = +inputCadence.value;
      if (
        // !Number.isFinite(distance) ||
        // !Number.isFinite(duration) ||
        // !Number.isFinite(cadence)
        !validInputs(distance, duration, cadence) ||
        !allPositive(distance, duration, cadence)
      )
        return alert("Inputs have to be positive numbers!");

      workout = new Running([lat, lng], distance, duration, cadence);
    }
    // If workout cycling, create cycle object
    if (type === "cycling") {
      // Check if data is valid
      const elevation = +inputElevation.value;
      if (
        !validInputs(distance, duration, elevation) ||
        !allPositive(distance, duration)
      )
        return alert("Inputs have to be positive numbers!");

      workout = new Cycling([lat, lng], distance, duration, elevation);
    }
    // Add new object to workout array
    this.#workouts.push(workout);

    // Render workout on map as marker
    this._renderWorkoutMarker(workout);
    // Render workout on list
    this._renderWorkout(workout);
    // Hide form + —á–∏—Å—Ç–∏–º –∏–Ω–ø—É—Ç—ã
    this._hideForm();

    // Set local storage to all workouts
    this._setLocalStorage();
  }

  _renderWorkoutMarker(workout) {
    L.marker(workout.coords)
      .addTo(this.#map)
      .bindPopup(
        L.popup({
          maxWidth: 250,
          minWidth: 100,
          autoClose: false,
          closeOnClick: false,
          className: `${workout.type}-popup`,
        })
      )
      .setPopupContent(
        `${workout.type === "running" ? "üèÉ‚Äç‚ôÇÔ∏è" : "üö¥‚Äç‚ôÄÔ∏è"} ${workout.description}`
      )
      .openPopup();
  }

  _renderWorkout(workout) {
    let html = `<li class="workout workout--${workout.type}" data-id="${
      workout.id
    }">
    <h2 class="workout__title">${workout.description}</h2>
    <div class="workout__details">
      <span class="workout__icon">${
        workout.type === "running" ? "üèÉ‚Äç‚ôÇÔ∏è" : "üö¥‚Äç‚ôÄÔ∏è"
      }</span>
      <span class="workout__value">${workout.distance}</span>
      <span class="workout__unit">km</span>
    </div>
    <div class="workout__details">
      <span class="workout__icon">‚è±</span>
      <span class="workout__value">${workout.duration}</span>
      <span class="workout__unit">min</span>
    </div>`;

    if (workout.type === "running") {
      html += `
        <div class="workout__details">
          <span class="workout__icon">‚ö°Ô∏è</span>
          <span class="workout__value">${workout.pace.toFixed(1)}</span>
          <span class="workout__unit">min/km</span>
        </div>
        <div class="workout__details">
          <span class="workout__icon">ü¶∂üèº</span>
          <span class="workout__value">${workout.cadence}</span>
          <span class="workout__unit">spm</span>
        </div>
      </li>
      `;
    }

    if (workout.type === "cycling") {
      html += `
      <div class="workout__details">
            <span class="workout__icon">‚ö°Ô∏è</span>
            <span class="workout__value">${workout.speed.toFixed(1)}</span>
            <span class="workout__unit">km/h</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">‚õ∞</span>
            <span class="workout__value">${workout.elevationGain}</span>
            <span class="workout__unit">m</span>
          </div>
        </li>
      `;
    }

    form.insertAdjacentHTML("afterend", html);
  }

  _moveToPopup(e) {
    const workoutEl = e.target.closest(".workout");

    if (!workoutEl) return;

    const workout = this.#workouts.find(
      (work) => work.id === workoutEl.dataset.id
    );

    this.#map.setView(workout.coords, this.#mapZoom, {
      animate: true,
      pan: {
        duration: 1,
      },
    });

    // using the public interface
    // workout.click();

    // using local storage API
  }

  _setLocalStorage() {
    // key-value store
    localStorage.setItem("workouts", JSON.stringify(this.#workouts));
  }

  _getLocalStorage() {
    const data = JSON.parse(localStorage.getItem("workouts"));

    // –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏–∫–∞–∫–æ–π –¥–∞—Ç—ã - —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (!data) return;

    this.#workouts = data;

    this.#workouts.forEach((work) => this._renderWorkout(work));
  }

  reset() {
    localStorage.removeItem("workouts");
    location.reload();
  }
}

const app = new App();
